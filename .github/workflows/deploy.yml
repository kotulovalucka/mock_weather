name: Deploy to EC2
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    environment: production
    steps:
      - name: Clean workspace
        run: |
          # Ensure the runner has permissions to clean the workspace
          sudo chown -R $USER:$USER .
          # Force remove problem directories
          sudo rm -rf ./* || true
          sudo rm -rf ./.* || true

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: false
          fetch-depth: 1

      - name: Set permissions
        run: |
          sudo chown -R $USER:$USER .
          chmod -R 755 .
          mkdir -p logs/app
          chmod -R 777 logs

      - name: Create .dockerenv file
        run: |
          echo "${{ secrets.PROD_ENV_FILE }}" > .dockerenv
          chmod 644 .dockerenv

      - name: Load environment variables
        run: |
          set -a
          source .dockerenv
          set +a
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV

      - name: Check if database exists and is initialized
        id: check-db
        run: |
          # Check if Docker volume exists
          if docker volume ls | grep postgres_data; then
            # Check if database is accessible and has tables
            if docker-compose exec -T postgres psql -U "$DB_USER" -d "$DB_NAME" -c "\dt" 2>/dev/null | grep -q 'LLMArticle'; then
              echo "Database already exists and is initialized"
              echo "db_exists=true" >> $GITHUB_OUTPUT
            else
              echo "Database exists but needs initialization"
              echo "db_exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Database volume doesn't exist"
            echo "db_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and start services
        run: |
          sudo chown -R $USER:$USER /var/run/docker.sock || true

          set -a
          source .dockerenv
          set +a

          # If database doesn't exist or needs initialization, do a full rebuild
          if [ "${{ steps.check-db.outputs.db_exists }}" = "false" ]; then
            echo "Performing full deployment with database initialization..."
            docker-compose down --volumes --remove-orphans
            docker image prune -f
            docker-compose build --no-cache
            docker-compose up -d
          else
            echo "Updating application only, preserving database..."
            # Stop only the API container
            docker-compose stop weather-api
            # Remove old API image
            docker-compose build weather-api --no-cache
            # Start updated API container
            docker-compose up -d weather-api
          fi

          docker-compose ps

      - name: Health check
        run: |
          export DB_USER=${{ env.DB_USER }}
          export DB_NAME=${{ env.DB_NAME }}

          # Wait for PostgreSQL
          timeout=300
          until docker-compose exec -T postgres pg_isready -U "$DB_USER" -d "$DB_NAME" || [ $timeout -eq 0 ]; do
            echo "Waiting for PostgreSQL..."
            sleep 5
            ((timeout--))
          done

          if [ $timeout -eq 0 ]; then
            echo "PostgreSQL failed to become ready"
            docker-compose logs postgres
            exit 1
          fi

          # Check if database needs verification after initialization
          if [ "${{ steps.check-db.outputs.db_exists }}" = "false" ]; then
            echo "Verifying database initialization..."
            # Wait a bit for DDL to be applied
            sleep 10
            # Verify tables exist
            if ! docker-compose exec -T postgres psql -U "$DB_USER" -d "$DB_NAME" -c "\dt" | grep -q 'LLMArticle'; then
              echo "Database initialization failed - tables not created"
              docker-compose logs postgres
              exit 1
            fi
          fi

          # Check API
          timeout=60
          until curl -f http://localhost:3000/api/v1/health/status || [ $timeout -eq 0 ]; do
            echo "Waiting for API..."
            sleep 5
            ((timeout--))
          done

      - name: Show logs on completion
        if: always()
        run: docker-compose logs || true
